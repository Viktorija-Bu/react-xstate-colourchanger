{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"Donald\": {\n    person: \"Donald Trump\"\n  },\n  \"Joe\": {\n    person: \"Joe Biden\"\n  },\n  \"Barack\": {\n    person: \"Barack Obama\"\n  },\n  \"George\": {\n    person: \"George W. Bush\"\n  },\n  \"Bill\": {\n    person: \"Bill Clinton\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  }\n};\nconst bybio_vagina = {\n  \"yes\": {\n    yes: \"yes\"\n  },\n  \"of course\": {\n    yes: \"yes\"\n  },\n  \"sure\": {\n    yes: \"yes\"\n  },\n  \"definitely\": {\n    yes: \"yes\"\n  },\n  \"yeah\": {\n    yes: \"yes\"\n  },\n  \"most likely\": {\n    yes: \"yes\"\n  },\n  \"no\": {\n    no: \"no\"\n  },\n  \"no way\": {\n    no: \"no\"\n  },\n  \"never\": {\n    no: \"no\"\n  },\n  \"no for sure\": {\n    no: \"no\"\n  },\n  \"I don't think so\": {\n    no: \"no\"\n  },\n  \"not likely\": {\n    no: \"no\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I did not understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yes\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              yes: bybio_vagina[context.recResult].yes\n            };\n          }),\n          target: \"app\"\n        }, {\n          cond: context => \"no\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              no: bybio_vagina[context.recResult].no\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please repeat\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    app: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yes\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              yes: bybio_vagina[context.recResult].yes\n            };\n          }),\n          target: \"done\"\n        }, {\n          cond: context => \"no\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              no: bybio_vagina[context.recResult].no\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please repeat\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    done: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"app2\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"\".concat(context.day, \" it is. What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry could you repeat\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    app2: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yes\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              yes: bybio_vagina[context.recResult].yes\n            };\n          }),\n          target: \"done\"\n        }, {\n          cond: context => \"no\" in (bybio_vagina[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              no: bybio_vagina[context.recResult].no\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please repeat\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/vikto/antras_semis/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","bybio_vagina","yes","no","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","whole_day","app","done","app2"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"Donald\": { person: \"Donald Trump\" }, \r\n    \"Joe\": { person: \"Joe Biden\" },\r\n    \"Barack\": { person: \"Barack Obama\" },\r\n    \"George\": { person: \"George W. Bush\" },\r\n    \"Bill\": { person: \"Bill Clinton\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 9\": { time: \"9:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n}\r\n\r\nconst bybio_vagina: { [index: string]: { yes?: string, no?: string } } = { \r\n    \"yes\": { yes: \"yes\" },\r\n    \"of course\": { yes: \"yes\" },\r\n    \"sure\": { yes: \"yes\" },\r\n    \"definitely\": { yes: \"yes\" },\r\n    \"yeah\": { yes: \"yes\" },\r\n    \"most likely\": { yes: \"yes\" },\r\n    \"no\": { no: \"no\" },\r\n    \"no way\": { no: \"no\" },\r\n    \"never\": { no: \"no\" },\r\n    \"no for sure\": { no: \"no\" },\r\n    \"I don't think so\": { no: \"no\" },\r\n    \"not likely\": { no: \"no\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"\r\n                \r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I did not understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                } \r\n            }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: bybio_vagina[context.recResult].yes } }),\r\n                    target: \"app\" },\r\n                    { cond: (context) => \"no\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: bybio_vagina[context.recResult].no } }),\r\n                    target: \"time\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        app: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: bybio_vagina[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: bybio_vagina[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        done: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Your appointment has been created!`\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"app2\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.day} it is. What time is your meeting?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry could you repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        app2: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: bybio_vagina[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (bybio_vagina[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: bybio_vagina[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}