{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","yes","no","dmMachine","initial","states","start","on","CLICK","thing_to_do","id","RECOGNISED","actions","assign","context","choice","recResult","target","prompt","entry","ENDSPEECH","ask","nomatch","chosen_thing","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","res","intent","name","console","log","onError","final","cond","TODO_item","Timer","Appointment","who","whole_day","app","done","app2","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.649ca57b.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://viktorija-lab2.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"Donald\": { person: \"Donald Trump\" }, \r\n    \"Joe\": { person: \"Joe Biden\" },\r\n    \"Barack\": { person: \"Barack Obama\" },\r\n    \"George\": { person: \"George W. Bush\" },\r\n    \"Bill\": { person: \"Bill Clinton\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 9\": { time: \"9:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n}\r\n\r\nconst grammar2: { [index: string]: { yes?: string, no?: string } } = { \r\n    \"yes\": { yes: \"yes\" },\r\n    \"of course\": { yes: \"yes\" },\r\n    \"sure\": { yes: \"yes\" },\r\n    \"definitely\": { yes: \"yes\" },\r\n    \"yeah\": { yes: \"yes\" },\r\n    \"most likely\": { yes: \"yes\" },\r\n    \"no\": { no: \"no\" },\r\n    \"no way\": { no: \"no\" },\r\n    \"never\": { no: \"no\" },\r\n    \"no for sure\": { no: \"no\" },\r\n    \"I don't think so\": { no: \"no\" },\r\n    \"not likely\": { no: \"no\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: \"start\",\r\n    states: {\r\n        start:{\r\n            on: {\r\n                CLICK: \"thing_to_do\"\r\n            }\r\n        },\r\n        thing_to_do:{\r\n            id: \"choose\",\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { choice: context.recResult } }),\r\n                    target: \"chosen_thing\" },\r\n                \r\n                { target: \".nomatch\" }]\r\n            },\r\n            states:{\r\n                prompt: { entry: say(\"What would you like to do?\"),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: { entry: say(\"Would you mind repeating?\"),\r\n                on: { ENDSPEECH: \"ask\" }}\r\n            }\r\n        },\r\n        chosen_thing:{\r\n            invoke: {\r\n                id: \"RASA\",\r\n                src: (context, event) =>  nluRequest(context.choice),\r\n                onDone:{\r\n                    target: \"final\",\r\n                    actions:[\r\n                        assign((context, event) => { return { res: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: \"thing_to_do\",\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        final:{\r\n            initial: \"prompt\",\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.res === \"Appointment\",\r\n                    target: \"Appointment\" },\r\n                    { cond: (context) => context.res === \"TODO_item\",\r\n                    target: \"TODO_item\" },\r\n                    { cond: (context) => context.res === \"Timer\",\r\n                    target: \"Timer\" },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let me check`}))},\r\n                nomatch: {\r\n                    entry: say(\"The task is unavailable\"),\r\n                    on: { ENDSPEECH: \"#choose\" }\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        TODO_item: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"thing_to_do\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Sorry, but this tool does not exist\")\r\n                }\r\n            }\r\n        },\r\n        Timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"thing_to_do\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Sorry, but this tool does not exist\")\r\n                }\r\n            }\r\n        },\r\n        Appointment:{\r\n            initial: \"prompt\",\r\n            on:{ ENDSPEECH: \"who\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Let's create an appointment\")\r\n                }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"\r\n                \r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I did not understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                } \r\n            }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"app\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"time\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        app: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        done: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"start\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Your appointment has been created!`\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"app2\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.day} it is. What time is your meeting?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry could you repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        app2: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`   \r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please repeat\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n    }\r\n})","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}