{"version":3,"sources":["dmAppointment2.ts","index.tsx"],"names":["actions","cancel","say","text","send","_context","type","value","cnt","helpme","saysmth","nomatch","help","maxspeech2","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","id","maxspeech","cond","target","grammar","person","day","time","grammar2","yes","no","dmMachine","start","CLICK","thing_to_do","RECOGNISED","assign","context","choice","recResult","MAXSPEECH","chosen_thing","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","res","intent","name","console","log","onError","final","TODO_item","Timer","Appointment","who","whole_day","app","done","app2","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.c9986759.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nconst {cancel} = actions\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nlet cnt = 0\r\n\r\nfunction helpme(saysmth: Action<SDSContext, SDSEvent>, nomatch:string, help:string, maxspeech2:string) : MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: \"prompt\",\r\n        states:{\r\n            prompt: {\r\n                entry: saysmth,\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n\r\n            ask: {\r\n                entry: [listen(), send(\"MAXSPEECH\", {delay: 3500, id: \"maxspeech2\"})]\r\n            },\r\n\r\n            help: {\r\n                entry: say(help),\r\n                on: { ENDSPEECH: \"prompt\" }\r\n            },\r\n\r\n            nomatch: {\r\n                entry: say(nomatch),\r\n                on: { ENDSPEECH: \"prompt\" }},\r\n\r\n            maxspeech: {\r\n                entry: say(maxspeech2),\r\n                on: { \r\n                    ENDSPEECH: [\r\n                        {cond: () => (cnt++) ===3, target: \"prompt\"},\r\n                        {target: \"#machine\"}\r\n                    ]}}\r\n            },\r\n        \r\n    })\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://viktorija-lab2.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"Donald\": { person: \"Donald Trump\" }, \r\n    \"Joe\": { person: \"Joe Biden\" },\r\n    \"Barack\": { person: \"Barack Obama\" },\r\n    \"George\": { person: \"George W. Bush\" },\r\n    \"Bill\": { person: \"Bill Clinton\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 9\": { time: \"9:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n}\r\n\r\nconst grammar2: { [index: string]: { yes?: string, no?: string } } = { \r\n    \"yes\": { yes: \"yes\" },\r\n    \"of course\": { yes: \"yes\" },\r\n    \"sure\": { yes: \"yes\" },\r\n    \"definitely\": { yes: \"yes\" },\r\n    \"yeah\": { yes: \"yes\" },\r\n    \"most likely\": { yes: \"yes\" },\r\n    \"no\": { no: \"no\" },\r\n    \"no way\": { no: \"no\" },\r\n    \"never\": { no: \"no\" },\r\n    \"no for sure\": { no: \"no\" },\r\n    \"I don't think so\": { no: \"no\" },\r\n    \"not likely\": { no: \"no\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    id: \"machine\",\r\n    initial: \"start\",\r\n    states: {\r\n        start:{\r\n            on: {\r\n                CLICK: \"thing_to_do\"\r\n            }\r\n        },\r\n        thing_to_do:{\r\n            id: \"choose\",\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { choice: context.recResult } }),\r\n                    target: \"chosen_thing\" },\r\n                \r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(say(\"What would you like to do?\"), \"Would you mind repeating?\", \"Choose one of the three actions: appointment, to do list or timer\", \"Please provide input\")\r\n\r\n        },\r\n        chosen_thing:{\r\n            invoke: {\r\n                id: \"RASA\",\r\n                src: (context, event) =>  nluRequest(context.choice),\r\n                onDone:{\r\n                    target: \"final\",\r\n                    actions:[\r\n                        assign((context, event) => { return { res: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: \"thing_to_do\",\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        final:{\r\n            initial: \"prompt\",\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.res === \"Appointment\",\r\n                    target: \"Appointment\" },\r\n                    { cond: (context) => context.res === \"TODO_item\",\r\n                    target: \"TODO_item\" },\r\n                    { cond: (context) => context.res === \"Timer\",\r\n                    target: \"Timer\" },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let me check`}))},\r\n                nomatch: {\r\n                    entry: say(\"The task is unavailable\"),\r\n                    on: { ENDSPEECH: \"#choose\" }\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        TODO_item: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"thing_to_do\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Sorry, but this tool does not exist\")\r\n                }\r\n            }\r\n        },\r\n        Timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"thing_to_do\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Sorry, but this tool does not exist\")\r\n                }\r\n            }\r\n        },\r\n        Appointment:{\r\n            initial: \"prompt\",\r\n            on:{ ENDSPEECH: \"who\" },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Let's create an appointment\")\r\n                }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\" },\r\n                    { cond: (context) => context.recResult === \"help\", \r\n                    target: \".help\" },\r\n\r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(say(\"Who are you meeting with?\"), \"Sorry I don't know them\", \"Name a person from your contact list whom you want to meet\", \"Please repeat the input\")\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"},\r\n                    { cond: (context) => context.recResult === \"help\", \r\n                    target: \".help\" },\r\n                \r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`})), \"Sorry I did not understand\", \"Name a day when you want to meet your chosen person from the contact list\", \"I cannot grasp the input, would you mind repeating?\"),           \r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"app\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"time\" },\r\n\r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(say(\"Will it take the whole day?\"), \"Please repeat\", \"You need to tell me whether you want to meet the person from morning to late afternoon\", \"Looks like the input is unclear, please repeat\")\r\n        },\r\n        app: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})), \"Please repeat\", \"Time to make a decision whether you want to meet your chosen person from morning to afternoon\", \"Time to repeat the input\")\r\n        },\r\n        done: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"start\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Your appointment has been created!`\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"app2\"\r\n\r\n                },\r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.day} it is. What time is your meeting?`})), \"Sorry could you repeat\", \"Say hour for the meeting on your chosen day\", \"Seems like I cannot grasp you, please say one more time\")\r\n        },\r\n        app2: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"yes\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { yes: grammar2[context.recResult].yes } }),\r\n                    target: \"done\" },\r\n                    { cond: (context) => \"no\" in (grammar2[context.recResult] || {}),\r\n                    actions: assign((context) => { return { no: grammar2[context.recResult].no } }),\r\n                    target: \"who\" },\r\n\r\n                { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: \".maxspeech\"\r\n            },\r\n\r\n            ...helpme(send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})), \"Please repeat\", \"Time to make a decision comrade\", \"Are you being silent? Repeat please\")\r\n        },\r\n    }\r\n})","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment2\";\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        MAXSPEECH: \"idle\",\r\n                    },\r\n                    states: {\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}